{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","registerServiceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.acaeb1f7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card= ({ name, email, id}) => {\r\n\r\n\treturn(\r\n\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t  <img alt=\"Robots\" src={`https://robohash.org/${id}?200x200`}/>\t\r\n\t  <div>\r\n\t\t<h2>{name}</h2>\r\n\t\t<p>{email} </p>\r\n\t</div>\r\n   </div>\r\n );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList= ({robots}) => {\r\nreturn( \r\n\t<div>\r\n\t\t{\r\n\t\t robots.map((user, i) => {\r\n\t\t return (\r\n\t\t\t <Card \r\n\t\t\t\tkey={i} \r\n\t\t\t\tid={robots[i].id} \r\n\t\t\t\tname={robots[i].name} \r\n\t\t\t\temail={robots[i].email}\r\n\t\t\t /> \r\n\t\t );\r\n\t\t})\r\n\r\n\t\t}\r\n\t</div>\r\n);\r\n}\r\n export default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n return (\r\n   <div className='pa2'>\r\n\t<input \r\n\t   className='pa3 ba b--green bg-lightest-blue'\r\n\t   type='search' \r\n\t   placeholder='search robots' \r\n\t   onChange= {searchChange}\r\n\t  />\r\n\t</div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n return (\r\n\t<div style={{overflowY: 'scroll', border: '3px solid black', height: '800px'}}>\r\n   {props.children}\r\n\t</div> \r\n );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\n\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\trobots: [],\r\n\tsearchfield: ''\r\n  }\r\n}\r\n\r\ncomponentDidMount() {\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response => response.json())\r\n\t.then(users => this.setState({robots: users}));\r\n}\r\n\r\nonSearchChange = (event) => {\r\n\tthis.setState({searchfield: event.target.value})\r\n}\r\n\t\r\n\r\nrender () {\r\n\t const filteredRobots = this.state.robots.filter(robots => {\r\n return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n })\r\n\t if (this.state.robots.length === 0) {\r\n\t \treturn <h1> Loading </h1>\r\n\t } else {\r\n return (\r\n \t<div className='tc'>\r\n \t<h1 className='f1'> RoboFriends</h1>\r\n \t<SearchBox searchChange={this.onSearchChange} />\r\n \t<Scroll>\r\n\t <CardList robots={filteredRobots} />\r\n\t</Scroll>\r\n\t</div>\r\n  );\r\n }\r\n }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\n\n\nReactDOM.render( <App />, document.getElementById('root'));\nregisterServiceWorker();\n\n"],"sourceRoot":""}